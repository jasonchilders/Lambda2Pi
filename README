# author: Jason Childers

A project for exploring conversion of lambda-calculus terms to pi-calculus processes.

Requirements for running Lambda2Pi.py
1. /usr/local/bin/python3 should be available (might work on python 2, but tested against python3)

2. To run, type the following at the cmdline for help on how to execute:
    a. $ ./Lambda2Pi --help
or
    b. $ python3 Lambda2Pi --help

This will give you an idea of how to execute the program.

3. Try some examples...
    a. $ ./Lambda2Pi 'x'                                                // x
    b. $ ./Lambda2Pi.py 'lambda x: x'                                   // I
    c. $ ./Lambda2Pi.py 'lambda x: (lambda y: x)'                       // K
    d. $ ./Lambda2Pi.py 'lambda x: lambda y: lambda z: x(z)(y(z))'      // S


I've taken a couple of shortcuts in the interest of time.  Trivial to resolve though...

- I am not entirely sure how to represent/reduce: x(z)(y(z)) to use a channel so i've translated that to x(z)(y(z))!p
 in that case.  I suspect the conversion to the correct value here might also be trivial, but I'm not sure of what the
 translation rule for that is.


To run the unittests do the following in the cli:

    $ python3 -m unittest TestLambdaTerm

This DOES NOT WORK with python2.  It borks on the 'Î»' symbol in the class comments section of LambdaTerm.py.

